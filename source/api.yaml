- type: package
  name: core
  members:
    - type: module
      name: lambda
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.lambda``"
        Repository: https://github.com/folktale/core.lambda
        Bug Tracker: https://github.com/folktale/core.lambda/issues
      synopsis: >-
        Core combinators and higher-order functions.
      members:
        - type: function
          name: identity
          header: identity(a)
          signature: |
            α → α
          meta:
            returns: "The argument it's given."
          synopsis: |
            The identity combinator. Always returns the argument it's given.

        - type: function
          name: constant
          header: constant(a, b)
          signature: |
            α → β → α
          meta:
            returns: "The first argument it's given."
          synopsis: |
            The constant combinator. Always returns the first argument it's given.

        - type: function
          name: apply
          header: apply(f, a)
          signature: |
            (α → β) → α → β
          meta:
            returns: "The result of applying ``f`` to ``a``."
          synopsis: |
            Applies a function to an argument.

        - type: function
          name: flip
          header: flip(f)
          signature: |
            (α → β → γ) → (β → α → γ)
          meta:
            returns: "The function ``f`` with parameters inverted."
          synopsis: |
            Inverts the order of the parameters of a binary function.

        - type: function
          name: compose
          header: compose(f, g)
          signature: |
            (β → γ) → (α → β) → (α → γ)
          meta:
            returns: "A composition of ``f`` and ``g``."
          synopsis: |
            Composes two functions together.

        - type: function
          name: curry
          header: curry(n, f)
          signature: |
            ₙ:Number → (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → ... → αₙ → β)
          meta:
            returns: "A curried version of ``f``, up to ``n`` arguments."
          synopsis: |
            Transforms any function on tuples into a curried function.

        - type: function
          name: spread
          header: spread(f, xs)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (#[α₁, α₂, ..., αₙ] → β)
          meta:
            returns: "The result of applying the function ``f`` to arguments ``xs``."
          synopsis: |
            Applies a list of arguments to a curried function.

        - type: function
          name: uncurry
          header: uncurry(f)
          signature: |
            (α₁ → α₂ → ... → αₙ → β) → (α₁, α₂, ..., αₙ → β)
          meta:
            returns: "A function on tuples."
          synopsis: |
            Transforms a curried function into a function on tuples.

        - type: function
          name: upon
          header: upon(f, g)
          signature: |
            (β → β → γ) → (α → β) → (α → α → γ)
          meta:
            returns: "A binary function ``f`` with arguments transformed by ``g``."
          synopsis: |
            Applies an unary function to both arguments of a binary function.
        
    - type: module
      name: arity
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.arity``"
        Repository: https://github.com/folktale/core.arity
        Bug Tracker: https://github.com/folktale/core.arity/issues
      synopsis: >-
        Restricts the arity of variadic functions.
      members:
        - type: function
          name: nullary
          header: nullary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (Unit → β)
          meta:
            returns: "A function that takes no arguments."
          synopsis: |
            Restricts a variadic function to a nullary one.

        - type: function
          name: unary
          header: unary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → β)
          meta:
            returns: "A function that takes one argument."
          synopsis: |
            Restricts a variadic function to an unary one.

        - type: function
          name: binary
          header: binary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → β)
          meta:
            returns: "A function that takes two arguments."
          synopsis: |
            Restricts a variadic function to a binary one.

        - type: function
          name: ternary
          header: ternary(f)
          signature: |
            (α₁, α₂, ..., αₙ → β) → (α₁ → α₂ → α₃ → β)
          meta:
            returns: "A function that takes three arguments."
          synopsis: |
            Restricts a variadic function to a ternary one.


    - type: module
      name: operators
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.0
        npm package: "``core.operators``"
        Repository: https://github.com/folktale/core.operators
        Bug Tracker: https://github.com/folktale/core.operators/issues
      synopsis: >-
        Provides JS operators as curried functions.
      members:
        - type: function
          category: Arithmetic
          name: add
          header: add(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's addition (``a + b``) operator.

        - type: function
          category: Arithmetic
          name: subtract
          header: subtract(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's subtraction (``a - b``) operator.

        - type: function
          category: Arithmetic
          name: divide
          header: divide(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's division (``a / b``) operator.

        - type: function
          category: Arithmetic
          name: multiply
          header: multiply(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's multiplication (``a * b``) operator.

        - type: function
          category: Arithmetic
          name: modulus
          header: modulus(a, b)
          signature: |
            Number → Number → Number
          synopsis: |
            JavaScript's modulus (``a % b``) operator.

        - type: function
          category: Arithmetic
          name: negate
          header: negate(a)
          signature: |
            Number → Number
          synopsis: |
            JavaScript's unary negation (``-a``) operator.

        - type: function
          category: Arithmetic
          name: increment
          header: increment(a)
          signature: |
            Number → Number
          synopsis: |
            Short for ``add(1)(a)``.
          seealso:
            - core.operators.add

        - type: function
          category: Arithmetic
          name: decrement
          header: decrement(a)
          signature: |
            Number → Number
          synopsis: |
            Short for ``subtract(a)(1)``.
          seealso:
            - core.operators.subtract

        # Logical operators
        - type: function
          category: Logical
          name: not
          header: not(a)
          signature: |
            Boolean → Boolean
          synopsis: |
            Logical negation (``!a``).

        - type: function
          category: Logical
          name: and
          header: and(a, b)
          signature: |
            Boolean → Boolean → Boolean
          synopsis: |
            Logical conjunction (``a && b``).

        - type: function
          category: Logical
          name: or
          header: or(a, b)
          signature: |
            Boolean → Boolean → Boolean
          synopsis: |
            Logical disjunction (``a || b``).

        # Bitwise operators
        - type: function
          category: Bitwise
          name: bitNot
          header: bitNot(a)
          signature: |
            Int → Int
          synopsis: |
            Bitwise negation (``~a``)

        - type: function
          category: Bitwise
          name: bitAnd
          header: bitAnd(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise intersection (``a & b``)

        - type: function
          category: Bitwise
          name: bitOr
          header: bitOr(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise union (``a | b``)

        - type: function
          category: Bitwise
          name: bitXor
          header: bitXor(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise exclusive union (``a ^ b``)
            
        - type: function
          category: Bitwise
          name: bitShiftLeft
          header: bitShiftLeft(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Bitwise left shift (``a << b``)
            
        - type: function
          category: Bitwise
          name: bitShiftRight
          header: bitShiftRight(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Sign-propagating bitwise right shift (``a >> b``)
            
        - type: function
          category: Bitwise
          name: bitUnsignedShiftRight
          header: bitUnsignedShiftRight(a, b)
          signature: |
            Int → Int → Int
          synopsis: |
            Zero-fill bitwise right shift (``a >>> b``)
            
        # Relational operators
        - type: function
          category: Relational
          name: equal
          header: equal(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Strict reference equality (``a === b``).

        - type: function
          category: Relational
          name: notEqual
          header: notEqual(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Strict reference inequality (``a !== b``).

        - type: function
          category: Relational
          name: greaterThan
          header: greaterThan(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Greater than (``a > b``).

        - type: function
          category: Relational
          name: greaterThanOrEqualTo
          header: greaterThanOrEqualTo(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Greater than or equal to (``a >= b``).
        
        - type: function
          category: Relational
          name: lessThan
          header: lessThan(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Less than (``a < b``).

        - type: function
          category: Relational
          name: lessThanOrEqualTo
          header: lessThanOrEqualTo(a, b)
          signature: |
            α → α → Boolean
          synopsis: |
            Less than or equal to (``a <= b``).
        
        # Special
        - type: function
          category: Special
          name: get
          header: get(key, object)
          signature: |
            String → Object → α | Undefined
          synopsis: |
            Property accessor (``object[key]``).

        - type: function
          category: Special
          name: has
          header: has(key, object)
          signature: |
            String → Object → Boolean
          synopsis: |
            Tests the existence of a property in an object (``key in object``).

        - type: function
          category: Special
          name: isInstance
          header: isInstance(constructor, a)
          signature: |
            Function → Object → Boolean
          synopsis: |
            Instance check (``a instanceof constructor``).

        - type: function
          category: Special
          name: create
          header: create(constructor, ...args)
          signature: |
            (new(α₁, α₂, ..., αₙ) → β) → (α₁, α₂, ..., αₙ) → β)
          synopsis: |
            Constructs new objects (``new constructor(...args)``)

        - type: function
          category: Special
          name: typeOf
          header: typeOf(a)
          signature: |
            α → String
          synopsis: |
            Returns the internal type of the object (``typeof a``)
        
        - type: function
          category: Special
          name: classOf
          header: classOf(a)
          signature: |
            α → String
          synopsis: |
            Returns the internal ``[[Class]]`` of the object.

    # --
    - type: module
      name: check
      meta:
        Stability: 1 - Experimental
        Portability: Portable
        Version: 0.1.0
        npm package: "``core.check``"
        Repository: https://github.com/folktale/core.check
        Bug Tracker: https://github.com/folktale/core.check/issues
      synopsis: >-
        Interface checking for JS values.
      members:
        - type: class
          category: Types and structures
          name: Violation
          signature: |
            type Violation = Tag(String, Any)
                           | Equality(Any, Any)
                           | Identity(Any, Any)
                           | Any(Array(Any))
                           | All(Array(Any))

            implements
              Equality, Extractor, Reflect, Cata, Semigroup, ToString
          synopsis: >-
            Represents a violation of an interface's constraint.
          members:
            - type: attribute
              category: Comparison and testing
              name: isTag
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has a ``Tag`` tag.

            - type: attribute
              category: Comparison and testing
              name: isEquality
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Equality`` tag.

            - type: attribute
              category: Comparison and testing
              name: isIdentity
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Identity`` tag.

            - type: attribute
              category: Comparison and testing
              name: isAny
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``Any`` tag.

            - type: attribute
              category: Comparison and testing
              name: isAll
              signature: |
                @Violation => Boolean
              synopsis: |
                ``true`` is the Violation has an ``All`` tag.

            - type: method
              category: Comparison and testing
              name: equals
              header: equals(aViolation)
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: >-
                  ``true`` if both Violations have the same contents (by reference equality).

            - type: method
              category: Combining
              name: concat
              header: concat(aViolation)
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: >-
                  A Violation with the contents combined.
              synopsis: >-
                Combines the contents of two Violations.

            - type: method
              category: Converting
              name: toString
              header: toString()
              signature: |
                @Violation => Violation → Boolean
              meta:
                returns: A textual representation of the Violation.

            - type: method
              category: Transforming
              name: cata
              header: cata(aPattern)
              signature: |
                @Violation => { r | Pattern } → β
                where type Pattern {
                  Tag: (String, Any) → β,
                  Equality: (Any, Any) → β,
                  Identity: (Any, Any) → β,
                  Any: Array(Any) → β,
                  All: Array(Any) → β
                }
              meta:
                returns: The result of applying the right transformation to the Violation.
              synopsis: |
                Provides a crude form of pattern matching over the Violation ADT. Since
                Violation also implements the Extractor interface, you may choose to
                use the Sparkler Sweet.js macro instead for a more powerful form of
                pattern matching.
                
        - type: function
          category: Primitive validations
          name: "Null"
          header: Null(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``null`` values.

        - type: function
          category: Primitive validations
          name: Undefined
          header: Undefined(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``undefined`` values.

        - type: function
          category: Primitive validations
          name: Boolean
          header: Boolean(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``Boolean`` values.

        - type: function
          category: Primitive validations
          name: Number
          header: Number(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``Number`` values.

        - type: function
          category: Primitive validations
          name: String
          header: String(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``String`` values.

        - type: function
          category: Primitive validations
          name: Function
          header: Function(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``Function`` values.

        - type: function
          category: Primitive validations
          name: Array
          header: Array(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``Array`` values.

        - type: function
          category: Primitive validations
          name: Object
          header: Object(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches only ``Object`` values.

        - type: function
          category: Primitive validations
          name: Any
          header: Any(aValue)
          signature: |
            Any → Validation(Violation, Any)
          synopsis: >-
            An interface that matches any values.

        # Dependent validations
        - type: function
          category: Dependent validations
          name: Value
          header: Value(expected)
          signature: |
            α → (α → Validation(Violation, α))
          synopsis: >-
            An interface that matches the given value by structural equality.

        - type: function
          category: Dependent validations
          name: Identity
          header: Identity(expected)
          signature: |
            α → (α → Validation(Violation, α))
          synopsis: >-
            An interface that matches the given value by reference equality.

        # Higher-order validations
        - type: function
          category: Higher-order validations
          name: Or
          header: Or(interfaces)
          signature: |
            Array(α → Validation(Violation, α)) → α → Validation(Violation, α)
          meta:
            returns: >-
              An interface that matches any of the given interfaces.

        - type: function
          category: Higher-order validations
          name: And
          header: And(interfaces)
          signature: |
            Array(α → Validation(Violation, α)) → α → Validation(Violation, α)
          meta:
            returns: >-
              An interface that matches only if all of the given interfaces match.

        - type: function
          category: Higher-order validations
          name: Seq
          header: Seq(interfaces)
          signature: |
            Array( α₁ → Validation<Violation, α₁)
                 , α₂ → Validation(Violation, α₂)
                 , ...
                 , αₙ → Validation(Violation, αₙ)>
            → Array(α₁, α₂, ..., αₙ)
            → Validation(Violation, Array(α₁, α₂, ..., αₙ))
          meta:
            returns: >-
              An interface that matches an N-Tuple with the given interfaces.

        - type: function
          category: Higher-order validations
          name: ArrayOf
          header: ArrayOf(interface)
          signature: |
            (α → Validation(Violation, α)) → α → Validation(Violation, α)
          meta:
            returns: >-
              An interface that matches an Array with values matching the given interface.

        - type: function
          category: Higher-order validations
          name: ObjectOf
          header: ObjectOf(aPattern)
          signature: |
            Object(Validation(Violation, Any)) → Object(Any) → Validation(Violation, Object(Any))
          meta:
            returns: >-
              An interface that matches an Object with the exact key/type mapping given.

        # Validating
        - type: function
          category: Validating interfaces
          name: assert
          header: assert(aValidation)
          signature: |
            Validation(Violation, α) → α :: throws
          meta:
            returns: >-
              The value, if no violations exist.
            raises: |
              - **TypeError** - If any violation exists.

    - type: module
      name: inspect
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.0.3
        npm package: "``core.inspect``"
        Repository: https://github.com/folktale/core.inspect
        Bug Tracker: https://github.com/folktale/core.inspect/issues
      synopsis: |
        Human-readable representations for built-in and custom objects.
      signature: |
        Any → String
      members:
        - type: function
          name: show
          header: show(maxDepth, value)
          signature: |
            Number → Any → String
          meta:
            returns: A human-readable representation of the value.
          synopsis: |
            Provides a human-readable representation of built-in values, and custom
            values implementing the ``ToString`` interface.
            
- type: package
  name: control
  members:
    - type: module
      name: monads
      meta:
        Stability: 1 - Experimental
        Portability: Portable
        Version: 0.6.0
        npm package: "``control.monads``"
        Repository: https://github.com/folktale/control.monads
        Bug Tracker: https://github.com/folktale/control.monads/issues
      synopsis: >-
        Common monadic combinators and sequencing operations.
      members:
        # Curried methods
        - type: function
          category: Curried methods
          name: concat
          header: concat(left, right)
          signature: |
            s:Semigroup(_) => s(α) → s(α) → s(α)
          meta:
            returns: A new semigroup with the values combined.
          synopsis: |
            Concatenates two semigroups.

        - type: function
          category: Curried methods
          name: empty
          header: empty()
          signature: |
            s:Semigroup(_) => s → s(α)
          meta:
            returns: A new empty semigroup.

        - type: function
          category: Curried methods
          name: map
          header: map(transformation, functor)
          signature: |
            f:Functor(_) => (α → β) → f(α) → f(β)
          meta:
            returns: A functor with its contents transformed by ``f``.
          synopsis: >-
            Maps over a functor instance.

        - type: function
          category: Curried methods
          name: of
          header: of(value, type)
          signature: |
            f:Applicative(_) => α → f → f(α)
          meta:
            returns: A new applicative instance containing the given value.
          synopsis: >-
            Constructs a new applicative intance.

        - type: function
          category: Curried methods
          name: ap
          header: ap(transformation, applicative)
          signature: |
            f:Applicative(_) => f(α → β) → f(α) → f(β)
          meta:
            returns: A new applicative with values transformed by the receiver.
          synopsis: |
            Applies the function of an Applicative to the values of another Applicative.

        - type: function
          category: Curried methods
          name: chain
          header: chain(transformation, monad)
          signature: |
            c:Chain(_) => (α → c(β)) → c(α) → c(β)
          meta:
            returns: A new monad as transformed by the function.
          synopsis: |
            Transforms the values of a monad into a new monad.

        # Basic operations
        - type: function
          name: sequence
          header: sequence(type, monads)
          signature: |
            m:Monad(_) => m → Array(m(α)) → m(Array(α))
          meta:
            returns: A monad containing an array of the values.
          synposis: |
            Evaluates each action in sequence, left to right, collecting the
            results.

        - type: function
          name: mapM
          header: mapM(type, transformation, values)
          signature: |
            m:Monad(_) => m → (α → m(β)) → Array(α) → m(Array(β))
          meta:
            returns: A monad containing an array of the values.
          synopsis: |
            Converts each value into a monadic action, then evaluates such
            actions, left to right, and collects their results.

        - type: function
          name: compose
          header: compose(f, g, value)
          signature: |
            m:Monad(_) => (α → m(β)) → (β → m(γ)) → α → m(γ)
          meta:
            returns: A composition of the given functions on monads.
          synopsis: |
            Left-to-right Kleisi composition of monads.

        - type: function
          name: rightCompose
          header: rightCompose(f, g, value)
          signature: |
            m:Monad(_) => (β → m(γ)) → (α → m(β)) → α → m(γ)
          meta:
            returns: A composition of the given functions on monads.
          synopsis: |
            Right-to-left Kleisi composition of monads.

        - type: function
          name: join
          header: join(monad)
          signature: |
            m:Monad(_) => m(m(α)) → m(α)
          meta:
            returns: The nested monad.
          synopsis: |
            Removes one level of nesting for a nested monad.

        - type: function
          name: filterM
          header: filterM(type, predicate, values)
          signature: |
            m:Monad(_) => m → (α → m(Boolean)) → Array(α) → m(Array(α))
          meta:
            returns: An array with values that pass the predicate, inside a monad.
          synopsis: |
            Filters the contents of an array with a predicate returning a
            monad.

        - type: function
          name: liftM2
          header: liftM2(transformation, monad1, monad2)
          signature: |
            m:Monad(_) => (α, β → γ) → m(α) → m(β) → m(γ)
          meta:
            returns: The transformed value inside a monad.
          synopsis: |
            Promotes a regular binary function to a function over monads.

        - type: function
          name: liftMN
          header: liftMN(transformation, values)
          signature: |
            m:Monad(_) => (α₁, α₂, ..., αₙ → β)
                        → Array(m(α₁), m(α₂), ..., m(αₙ))
                        → m(β) :: throws
          meta:
            returns: The transformed value inside a monad.
          synopsis: |
            Promotes a regular function of arity ``N`` to a function over monads.
          
    - type: module
      name: async
      meta:
        Stability: 1 - Experimental
        Portability: Portable
        Version: 0.5.1
        npm package: "``control.async``"
        Repository: https://github.com/folktale/control.async
        Bug Tracker: https://github.com/folktale/control.async
      signature: |
        Task(_, _) → AsyncModule
      synopsis: |
        Operations for asynchronous control flow.
      members:
        - type: function
          category: Combining tasks
          name: parallel
          header: parallel(tasks)
          signature: |
            Array(Task(α, β)) → Task(α, Array(β))
          meta:
            returns: A task that runs the given ones in parallel.
          synopsis: |
            Resolves all tasks in parallel, and collects their results.

        - type: function
          category: Combining tasks
          name: nondeterministicChoice
          header: nondeterministicChoice(tasks)
          signature: |
            Array(Task(α, β)) → Task(α, Maybe(β))
          meta:
            returns: A task that selects the first task to resolve.
          synopsis: |
            Runs all tasks in parallel, selects the first one to
            either succeed or fail.
          seealso:
            - control.async.choice
            - control.async.tryAll

        - type: function
          category: Combining tasks
          name: choice
          header: choice(tasks)
          signature: |
            Array(Task(α, β)) → Task(α, Maybe(β))
          synopsis: |
            Alias for :func:`nondeterministicChoice`

        - type: function
          category: Combining tasks
          name: tryAll
          header: tryAll(tasks)
          signature: |
            Array(Task(α, β)) → Task(Array(α), Maybe(β))
          synopsis: |
            Creates a task that succeeds if one task succeeds, or fails
            if all of them fail.
          seealso:
            - control.async.nondeterministicChoice

        # Transforming
        - type: function
          category: Transforming
          name: memoise
          header: memoise(task)
          signature: |
            Task(α, β) → Task(α, β)
          synopsis: |
            Caches the result of a Task, to avoid running the same task
            again for idempotent or pure tasks.

        # Error handling
        - type: function
          category: Error handling
          name: catchOnly
          header: catchOnly(filter, task)
          signature: |
            (γ → Boolean) → Task(α, β) :: throws(γ) → Task(α | γ, β)
          synopsis: |
            Reifies some errors thrown by the computation to a rejected task.
          seealso:
            - control.async.catchAllPossibleErrors

        - type: function
          category: Error handling
          name: catchAllPossibleErrors
          header: catchAllPossibleErrors(task)
          signature: |
            Task(α, β) :: throws(Any) → Task(Any, β)
          synopsis: |
            Reifies **all** errors thrown by the computation to a rejected task.
          seealso:
            - control.async.catchOnly

        # Converting
        - type: function
          category: Converting
          name: lift
          header: lift(function)
          signature: |
            (α₁, α₂, ..., αₙ, (β → Unit)) → (α₁, α₂, ..., αₙ → Task(Unit, β))
          synopsis: >-
            Converts a function that takes a simple continuation to a Task.

        - type: function
          category: Converting
          name: liftNode
          header: liftNode(function)
          signature: |
            (α₁, α₂, ..., αₙ, (β, γ → Unit)) → (α₁, α₂, ..., αₙ → Task(β, γ))
          synopsis: >-
            Converts a function that takes a Node-style continuation to a Task.

        - type: function
          category: Converting
          name: toNode
          header: toNode(task)
          signature: |
            Task(α, β) → (α | null, β | null → Unit)
          synopsis: >-
            Converts a Task to a Node-style function.

        - type: function
          category: Converting
          name: fromPromise
          header: fromPromise(promise)
          signature: |
            Promise(α, β) → Task(α, β)
          synopsis: |
            Converts a Promises/A+ to a Task.


        - type: function
          category: Converting
          name: toPromise
          header: toPromise(constructor, task)
          signature: |
            PromiseConstructor → Task(α, β) → Promise(α, β)

            type PromiseConstructor = new((α → Unit), (β → Unit) → Unit)
                                    → Promise(α, β)
          synopsis: |
            Converts from Task to Promises/A+.

            .. note::

               Do note that nested Tasks, unlike Promises/A+, are **NOT**
               flattened. You need to manually call :func:`control.monads.join`
               until you get to the value itself, if you care about passing
               just the value.

        # Timers
        - type: function
          category: Timers
          name: delay
          header: delay(milliseconds)
          signature: |
            Number → Task(Unit, Number)
          meta:
            returns: A Task that succeeds after N milliseconds.
          synopsis: |
            Constructs a Task that always succeeds after at least N milliseconds.
            The value of the Task will be the delta from the time of its
            initial execution to the time it gets resolved.

        - type: function
          category: Timers
          name: timeout
          header: timeout(milliseconds)
          signature: |
            Number → Task(TimeoutError, Unit)
          meta:
            returns: A Task that always fails after N milliseconds.
          synopsis: |
            Constructs a Task that always fails after at least N milliseconds.
            
- type: package
  name: data
  members:
    - type: module
      name: either
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.2.0
        npm package: "``data.either``"
        Repository: https://github.com/folktale/data.either
        Bug Tracker: https://github.com/folktale/data.either/issues
      synopsis: |
        A structure for disjunctions (e.g.: computations that may fail).
      members:
        - type: class
          category: Types and structures
          name: Either
          signature: |
            type Either(α, β) = Left(α) | Right(β)

            implements
              Applicative(β), Functor(β), Chain(β), Monad(β), ToString
          synopsis: |
            Represents the logical disjunction between ``α`` and ``β``.
          members:
            - type: staticmethod
              category: Constructing
              name: Left
              header: Left(value)
              signature: |
                α → Either(α, β)
              synopsis: |
                Constructs a new ``Either(α, β)`` structure holding a
                ``Left`` value. This usually represents a failure, due
                to the right-bias of this structure.

            - type: staticmethod
              category: Constructing
              name: Right
              header: Right(value)
              signature: |
                β → Either(α, β)
              synopsis: |
                Constructs a new ``Either(α, β)`` structure holding a
                ``Right`` value. This usually represents a successful
                value due to the right bias of this structure.

            - type: staticmethod
              category: Constructing
              name: of
              header: of(value)
              signature: |
                β → Either(α, β)
              synopsis: |
                Creates a new ``Either(α, β)`` instance holding the
                ``Right`` value ``β``.

            - type: staticmethod
              category: Constructing
              name: fromNullable
              header: fromNullable(value)
              signature: |
                α | null | undefined → Either(null | undefined, α)
              synopsis: |
                Constructs a new ``Either(α, β)`` structure from a nullable
                type.

                Takes the ``Left`` value if the value is ``null`` or
                ``undefined``. Takes the ``Right`` case otherwise.


            - type: staticmethod
              category: Constructing
              name: fromValidation
              header: fromValidation(value)
              signature: |
                Validation(α, β) → Either(α, β)
              synopsis: |
                Constructs a new ``Either(α, β)`` structure from a
                ``Validation(α, β)`` structure.

            # Conversions
            - type: method
              category: Converting
              name: toString
              header: toString()
              signature: |
                @Either(α, β) => Unit → String
              synopsis: |
                Returns a textual representation of the ``Either(α, β)`` structure.

            # Comparing and testing
            - type: attribute
              category: Comparing and testing
              name: isLeft
              signature: Boolean
              synopsis: |
                True if the ``Either(α, β)`` contains a ``Left`` value.

            - type: attribute
              category: Comparing and testing
              name: isRight
              signature: Boolean
              synopsis: |
                True if the ``Either(α, β)`` contains a ``Right`` value.

            - type: method
              category: Comparing and testing
              name: isEqual
              header: isEqual(anEither)
              signature: |
                @Either(α, β) => Either(α, β) → Boolean
              synopsis: |
                Tests if two ``Either(α, β)`` structures are equal. Compares
                the contents using reference equality.

            # Transforming
            - type: method
              category: Transforming
              name: ap
              header: ap(anApplicative)
              signature: |
                @Either(α, β → γ), f:Applicative(_) => f(β) → f(γ)
              synopsis: |
                Applies the function inside the ``Either(α, β)`` structure
                to another Applicative type.

            - type: method
              category: Transforming
              name: map
              header: map(transformation)
              signature: |
                @Either(α, β) => (β → γ) → Either(α, γ)
              synopsis: |
                Transforms the ``Right`` value of the ``Either(α, β)`` structure
                using a regular unary function.
              seealso:
                - data.either.Either.chain
                - data.either.Either.bimap
                - data.either.Either.leftMap

            - type: method
              category: Transforming
              name: chain
              header: chain(transformation)
              signature: |
                @Either(α, β), m:Monad(_) => (β → m(γ)) → m(γ)
              synopsis: |
                Transforms the ``Right`` value of the ``Either(α, β)`` structure
                using an unary function over monads.
              seealso:
                - data.either.Either.map
                - data.either.Either.orElse
              
            - type: method
              category: Transforming
              name: fold
              header: fold(leftTransformation, rightTransformation)
              signature: |
                @Either(α, β) => (α → γ), (β → γ) → γ
              synopsis: |
                Applies a function to each case in the data structure.
              seealso:
                - data.either.Either.cata

            - type: method
              category: Transforming
              name: cata
              header: cata(pattern)
              signature: |
                @Either(α, β) => { r | Pattern } → γ
                type Pattern {
                  Left: α → γ,
                  Right: β → γ
                }
              synopsis: |
                Applies a function to each case in the data structure.

            - type: method
              category: Transforming
              name: swap
              header: swap()
              signature: |
                @Either(α, β) => Unit → Either(β, α)
              synopsis: |
                Swaps the disjunction values.

            - type: method
              category: Transforming
              name: bimap
              header: bimap(leftTransformation, rightTransformation)
              signature: |
                @Either(α, β) => (α → γ), (β → δ) → Either(γ, δ)
              synopsis: |
                Maps both sides of the disjunction.
              seealso:
                - data.either.Either.map
                - data.either.Either.leftMap

            - type: method
              category: Transforming
              name: leftMap
              header: leftMap(transformation)
              signature: |
                @Either(α, β) => (α → γ) → Either(γ, β)
              synopsis: |
                Maps the left side of the disjunction.
              seealso:
                - data.either.Either.map
                - data.either.Either.bimap

            - type: method
              category: Transforming
              name: orElse
              header: orElse(transformation)
              signature: |
                @Either(α, β) => (α → Either(γ, β)) → Either(γ, β)
              synopsis: |
                Transforms the ``Left`` value into a new ``Either(α, β)``
                structure.

            # Extracting
            - type: method
              category: Extracting
              name: get
              header: get()
              signature: |
                @Either(α, β) => Unit → β :: throws
              meta:
                raises: |
                  - **TypeError** - If the structure has no ``Right`` value.
              synopsis: |
                Extracts the ``Right`` value out of the ``Either(α, β)``
                structure, if it exists.
              seealso:
                - data.either.Either.getOrElse
                - data.either.Either.merge

            - type: method
              category: Extracting
              name: getOrElse
              header: getOrElse(default)
              signature: |
                @Either(α, β) => β → β
              synopsis: |
                Extracts the ``Right`` value out of the ``Either(α, β)``
                structure. If it doesn't exist, returns a default value.

            - type: method
              category: Extracting
              name: merge
              header: merge()
              signature: |
                @Either(α, β) => Unit → α | β
              synopsis: |
                Returns whichever side of the disjunction that is present.
              
    - type: module
      name: maybe
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.2.0
        npm package: "``data.maybe``"
        Repository: https://github.com/folktale/data.maybe
        Bug Tracker: https://github.com/folktale/data.maybe/issues
      synopsis: |
        A structure for values that may not be present, or computations that
        may fail.
      members:
        - type: class
          category: Types and structures
          name: Maybe
          signature: |
            type Maybe(α) = Nothing | Just(α)

            implements
              Applicative(α), Functor(α), Chain(α), Monad(α), ToString
          synopsis: |
            A structure for values that may not be present, or computations
            that may fail.
          members:
            - type: staticmethod
              category: Constructing
              name: Nothing
              header: Nothing()
              signature: |
                Unit → Maybe(α)
              synopsis: |
                Constructs a new ``Maybe(α)`` structure with an absent value.
                Commonly used to represent a failure.

            - type: staticmethod
              category: Constructing
              name: Just
              header: Just(value)
              signature: |
                α → Maybe(α)
              synopsis: |
                Constructs a new ``Maybe(α)`` structure that holds the single
                value ``α``. Commonly used to represent a success.

            - type: staticmethod
              category: Constructing
              name: of
              header: of(value)
              signature: |
                α → Maybe(α)
              synopsis: |
                Constructs a new ``Maybe(α)`` structure that holds the single
                value ``α``.

            - type: staticmethod
              category: Constructing
              name: fromNullable
              header: fromNullable(value)
              signature: |
                α | null | undefined → Maybe(α)
              synopsis: |
                Constructs a new ``Maybe(α)`` value from a nullable type.

                If the value is ``null`` or ``undefined``, returns a ``Nothing``,
                otherwise returns the value wrapped in a ``Just``.

            - type: staticmethod
              category: Constructing
              name: fromEither
              header: fromEither(value)
              signature: |
                Either(α, β) → Maybe(β)
              synopsis: |
                Constructs a new ``Maybe(β)`` from an ``Either(α, β)`` value.

            - type: staticmethod
              category: Constructing
              name: fromValidation
              header: fromValidation(value)
              signature: |
                Validation(α, β) → Maybe(β)
              synopsis: |
                Constructs a new ``Maybe(β)`` from a ``Validation(α, β)`` value.

            # Comparing and testing
            - type: attribute
              category: Comparing and testing
              name: isNothing
              signature: Boolean
              synopsis: |
                True if the ``Maybe(α)`` structure contains a ``Nothing``.

            - type: attribute
              category: Comparing and testing
              name: isJust
              signature: Boolean
              synopsis: |
                True if the ``Maybe(α)`` structure contains a ``Just``.

            - type: method
              category: Comparing and testing
              name: isEqual
              header: isEqual(aMaybe)
              signature: |
                @Maybe(α) => Maybe(α) → Boolean
              synopsis: |
                Tests if two ``Maybe(α)`` contains are similar.

                Contents are checked using reference equality.

            # Converting
            - type: method
              category: Converting
              name: toString
              header: toString()
              signature: |
                @Maybe(α) => Unit → String
              synopsis: |
                Returns a textual representation of the structure.

            - type: method
              category: Converting
              name: toJSON
              header: toJSON()
              signature: |
                @Maybe(α) => Unit → Object
              synopsis: |
                Returns a JSON serialisation of the structure.

            # Transformation
            - type: method
              category: Transforming
              name: ap
              header: ap(anApplicative)
              signature: |
                @Maybe(α → β), f:Applicative(_) => f(α) → f(β)
              synopsis: |
                Applies the function inside the structure to another Applicative
                type.

            - type: method
              category: Transforming
              name: map
              header: map(transformation)
              signature: |
                @Maybe(α) => (α → β) → Maybe(β)
              synopsis: |
                Transforms the value of this structure using a regular unary
                function.

            - type: method
              category: Transforming
              name: chain
              header: chain(transformation)
              signature: |
                @Maybe(α), m:Monad(_) => (α → m(β)) → m(β)
              synopsis: |
                Transforms the value of this structure using an unary function
                over monads.

            - type: method
              category: Transforming
              name: orElse
              header: orElse(transformation)
              signature: |
                @Maybe(α) => (Unit → Maybe(β)) → Maybe(β)
              synopsis: |
                Transforms the failure into a new ``Maybe`` structure.

            - type: method
              category: Transforming
              name: cata
              header: cata(aPattern)
              signature: |
                @Maybe(α) => { Nothing: Unit → β, Just: α → β } → β
              synopsis: |
                Applies a function to each case in the data structure.

            # Extracting
            - type: method
              category: Extracting
              name: get
              header: get()
              signature: |
                @Maybe(α) => Unit → α :: throws
              meta:
                raises: |
                  - **TypeError** - if the structure is a Nothing.
              synopsis: |
                Extracts the value out of the structure, if it exists.
              seealso:
                - data.maybe.Maybe.getOrElse

            - type: method
              category: Extracting
              name: getOrElse
              header: getOrElse(default)
              signature: |
                @Maybe(α) => α → α
              synopsis: |
                Extracts the value out of the structure, if it exists. Otherwise
                return the given default value.

    - type: module
      name: task
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 3.0.0
        npm package: "``data.task``"
        Repository: https://github.com/folktale/data.task
        Bug Tracker: https://github.com/folktale/data.task/issues
      synopsis: |
        A structure for time-dependent values, providing explicit effects for
        delayed computations, latency, etc.
      members:
        - type: class
          category:  Types and structures
          name: Task
          signature: |
            type Task(α, β)

            new ((α → Unit), (β → Unit) → γ), (γ → Unit)
            
            implements
              Chain(β), Monad(β), Functor(β), Applicative(β),
              Semigroup(β), Monoid(β), ToString

          synopsis: |
            A structure for time-dependent values.
          members:
            # Constructing
            - type: staticmethod
              category: Constructing
              name: of
              header: of(value)
              signature: |
                β → Task(α, β)
              synopsis: |
                Constructs a new Task containing the given successful value.

            - type: staticmethod
              category: Constructing
              name: rejected
              header: rejected(value)
              signature: |
                α → Task(α, β)
              synopsis: |
                Constructs a new Task containing the given failure value.

            - type: staticmethod
              category: Constructing
              name: empty
              header: empty()
              signature: |
                Unit → Task(α, β)
              synopsis: |
                Constructs a Task that will never resolve.

            # Transforming
            - type: method
              category: Transforming
              name: map
              header: map(transformation)
              signature: |
                @Task(α, β) => (β → γ) → Task(α, γ)
              synopsis: |
                Transforms the successful value of the Task using a regular
                unary function.

            - type: method
              category: Transforming
              name: chain
              header: chain(transformation)
              signature: |
                @Task(α, β) => (β → Task(α, γ)) → Task(α, γ)
              synopsis: |
                Transforms the succesful value of the Task using a function
                over monads.

            - type: method
              category: Transforming
              name: ap
              header: ap(task)
              signature: |
                @Task(α, β → γ) => Task(α, β) → Task(α, γ)
              synopsis: |
                Transforms a Task by applying the function inside this receiver.

            - type: method
              category: Transforming
              name: orElse
              header: orElse(transformation)
              signature: |
                @Task(α, β) => (α → Task(γ, β)) → Task(γ, β)
              synopsis: |
                Transforms the failure value of the Task into a new Task.

            - type: method
              category: Transforming
              name: fold
              header: fold(onRejection, onSucecss)
              signature: |
                @Task(α, β) => (α → γ), (β → γ) → Task(δ, γ)
              synopsis: |
                Applies a function to each side of the task.
              seealso:
                - data.task.Task.cata

            - type: method
              category: Transforming
              name: cata
              header: cata(pattern)
              signature: |
                @Task(α, β) => { Rejected: α → γ, Resolved: β → γ } → Task(δ, γ)
              synopsis: |
                Applies a function to each side of the task.

            - type: method
              category: Transforming
              name: swap
              header: swap()
              signature: |
                @Task(α, β) => Unit → Task(β, α)
              synopsis: |
                Swaps the values in the task.

            - type: method
              category: Transforming
              name: bimap
              header: bimap(onRejection, onSuccess)
              signature: |
                @Task(α, β) => (α → γ), (β → δ) → Task(γ, δ)
              synopsis: |
                Maps both sides of the task.

            - type: method
              category: Transforming
              name: rejectedMap
              header: rejectedMap(transformation)
              signature: |
                @Task(α, β) => (α → γ) → Task(γ, β)
              synopsis: |
                Maps the failure side of the task.

            # Combining
            - type: method
              category: Combining
              name: concat
              header: concat(task)
              signature: |
                @Task(α, β) => Task(α, β) → Task(α, β)
              synopsis: |
                Selects the earlier of two Tasks.

# -- Validation
    - type: module
      name: validation
      meta:
        Stability: 3 - Stable
        Portability: Portable
        Version: 1.3.0
        npm package: "``data.validation``"
        Repository: https://github.com/folktale/data.validation
        Bug Tracker: https://github.com/folktale/data.validation/issues
      synopsis: |
        A disjunction that is more appropriate for validating inputs and
        aggregating failures.
      members:
        - type: class
          category: Types and structures
          name: Validation
          signature: |
            type Validation(α, β) = Failure(α) | Success(β)

            implements
              Applicative(β), Functor(β), ToString
          synopsis: |
            Represents the logical disjunction between ``α`` and ``β``.
          members:
            - type: staticmethod
              category: Constructing
              name: Failure
              header: Failure(value)
              signature: |
                α → Validation(α, β)
              synopsis: |
                Constructs a new Validation structure holding a
                ``Failure`` value.

            - type: staticmethod
              category: Constructing
              name: Success
              header: Success(value)
              signature: |
                β → Validation(α, β)
              synopsis: |
                Constructs a new Validation structure holding a
                ``Success`` value.

            - type: staticmethod
              category: Constructing
              name: of
              header: of(value)
              signature: |
                β → Validation(α, β)
              synopsis: |
                Creates a new Validation instance holding the
                ``Success`` value ``β``.

            - type: staticmethod
              category: Constructing
              name: fromNullable
              header: fromNullable(value)
              signature: |
                α | null | undefined → Validation(null | undefined, α)
              synopsis: |
                Constructs a new Validation structure from a nullable
                type.

                Takes the ``Failure`` value if the value is ``null`` or
                ``undefined``. Takes the ``Success`` case otherwise.


            - type: staticmethod
              category: Constructing
              name: fromEither
              header: fromEither(value)
              signature: |
                Either(α, β) → Validation(α, β)
              synopsis: |
                Constructs a new ``Validation(α, β)`` structure from an
                ``Either(α, β)`` structure.

            # Conversions
            - type: method
              category: Converting
              name: toString
              header: toString()
              signature: |
                @Validation(α, β) => Unit → String
              synopsis: |
                Returns a textual representation of the ``Validation(α, β)``
                structure.

            # Comparing and testing
            - type: attribute
              category: Comparing and testing
              name: isFailure
              signature: Boolean
              synopsis: |
                True if the ``Validation(α, β)`` contains a ``Failure`` value.

            - type: attribute
              category: Comparing and testing
              name: isSuccess
              signature: Boolean
              synopsis: |
                True if the ``Validation(α, β)`` contains a ``Success`` value.

            - type: method
              category: Comparing and testing
              name: isEqual
              header: isEqual(aValidation)
              signature: |
                @Validation(α, β) => Validation(α, β) → Boolean
              synopsis: |
                Tests if two ``Validation(α, β)`` structures are equal. Compares
                the contents using reference equality.

            # Transforming
            - type: method
              category: Transforming
              name: ap
              header: ap(anApplicative)
              signature: |
                @Validation(α, β → γ), f:Applicative(_) => f(β) → f(γ)
              synopsis: |
                Applies the function inside the ``Validation(α, β)`` structure
                to another Applicative type, and combines failures
                with a semigroup.

            - type: method
              category: Transforming
              name: map
              header: map(transformation)
              signature: |
                @Validation(α, β) => (β → γ) → Validation(α, γ)
              synopsis: |
                Transforms the ``Success`` value of the ``Validation(α, β)``
                structure using a regular unary function.
              seealso:
                - data.validation.Validation.bimap
                - data.validation.Validation.failureMap

              
            - type: method
              category: Transforming
              name: fold
              header: fold(leftTransformation, rightTransformation)
              signature: |
                @Validation(α, β) => (α → γ), (β → γ) → γ
              synopsis: |
                Applies a function to each case in the data structure.
              seealso:
                - data.validation.Validation.cata

            - type: method
              category: Transforming
              name: cata
              header: cata(pattern)
              signature: |
                @Validation(α, β) => { r | Pattern } → γ
                type Pattern {
                  Failure: α → γ,
                  Success: β → γ
                }
              synopsis: |
                Applies a function to each case in the data structure.

            - type: method
              category: Transforming
              name: swap
              header: swap()
              signature: |
                @Validation(α, β) => Unit → Validation(β, α)
              synopsis: |
                Swaps the disjunction values.

            - type: method
              category: Transforming
              name: bimap
              header: bimap(leftTransformation, rightTransformation)
              signature: |
                @Validation(α, β) => (α → γ), (β → δ) → Validation(γ, δ)
              synopsis: |
                Maps both sides of the disjunction.
              seealso:
                - data.validation.Validation.map
                - data.validation.Validation.leftMap

            - type: method
              category: Transforming
              name: failureMap
              header: failureMap(transformation)
              signature: |
                @Validation(α, β) => (α → γ) → Validation(γ, β)
              synopsis: |
                Maps the left side of the disjunction.
              seealso:
                - data.validation.Validation.map
                - data.validation.Validation.bimap

            - type: method
              category: Transforming
              name: orElse
              header: orElse(transformation)
              signature: |
                @Validation(α, β) => (α → Validation(γ, β)) → Validation(γ, β)
              synopsis: |
                Transforms the ``Failure`` value into a new ``Validation(α, β)``
                structure.

            # Extracting
            - type: method
              category: Extracting
              name: get
              header: get()
              signature: |
                @Validation(α, β) => Unit → β :: throws
              meta:
                raises: |
                  - **TypeError** - If the structure has no ``Success`` value.
              synopsis: |
                Extracts the ``Success`` value out of the ``Validation(α, β)``
                structure, if it exists.
              seealso:
                - data.validation.Validation.getOrElse
                - data.validation.Validation.merge

            - type: method
              category: Extracting
              name: getOrElse
              header: getOrElse(default)
              signature: |
                @Validation(α, β) => β → β
              synopsis: |
                Extracts the ``Success`` value out of the ``Validation(α, β)``
                structure. If it doesn't exist, returns a default value.

            - type: method
              category: Extracting
              name: merge
              header: merge()
              signature: |
                @Validation(α, β) => Unit → α | β
              synopsis: |
                Returns whichever side of the disjunction that is present.
